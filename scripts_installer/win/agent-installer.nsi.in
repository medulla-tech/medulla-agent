;
; (c) 2016 siveo, http://www.siveo.net
;
; This file is part of Pulse 2, http://www.siveo.net
;
; Pulse 2 is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 2 of the License, or
; (at your option) any later version.
;
; Pulse 2 is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with Pulse 2; if not, write to the Free Software
; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
; MA 02110-1301, USA.


; Make sure the installer runs as admin
RequestExecutionLevel admin

; Define a few variables
!define PRODUCT_NAME "Pulse Agent"
!define PRODUCT_PUBLISHER "SIVEO"
!define PRODUCT_WEB_SITE "http://www.siveo.net"
!define AGENT_VERSION "@@AGENT_VERSION@@"
!define PRODUCT_DIR_REGKEY "Software\${PRODUCT_PUBLISHER}\${PRODUCT_NAME}"
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"
!define AGENT_DEPS_NAME "${PRODUCT_NAME} dependencies"
!define PRODUCT_DEPS_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${AGENT_DEPS_NAME}"
!define USERDIR "c:\Users"
!define PROGRAMDATA "C:\ProgramData"

; Variables replaced by the script calling the nsi
!define PYTHON32_FILENAME "@@PYTHON32_FILENAME@@"
!define PYTHON64_FILENAME "@@PYTHON64_FILENAME@@"
!define PY_VCPYTHON27_FILENAME "@@PY_VCPYTHON27_FILENAME@@"
!define LIBCURL_FILENAME "@@LIBCURL_FILENAME@@"

!define PULSE_AGENT_FILENAME "@@PULSE_AGENT_FILENAME@@"
!define AGENT_PLUGINS_FILENAME "@@AGENT_PLUGINS_FILENAME@@"
!define PULSE_AGENT_CONFFILE "@@PULSE_AGENT_CONFFILE@@"
!define PULSE_SCHEDULER_CONFFILE "@@PULSE_SCHEDULER_CONFFILE@@"
!define PULSE_INVENTORY_CONFFILE "@@PULSE_INVENTORY_CONFFILE@@"
!define PULSE_AGENT_MODULE "@@PULSE_AGENT_MODULE@@"
!define PULSE_AGENT_TASK_XML_FILENAME "@@PULSE_AGENT_TASK_XML_FILENAME@@"
!define OPENSSH_NAME "@@OPENSSH_NAME@@"
!define OPENSSH32_FILENAME "@@OPENSSH32_FILENAME@@"
!define OPENSSH64_FILENAME "@@OPENSSH64_FILENAME@@"
!define LAUNCHER_SSH_KEY "@@LAUNCHER_SSH_KEY@@"
!define SSH_PORT "@@SSH_PORT@@"
!define FUSION_INVENTORY_AGENT32_FILENAME "@@FUSION_INVENTORY_AGENT32_FILENAME@@"
!define FUSION_INVENTORY_AGENT64_FILENAME "@@FUSION_INVENTORY_AGENT64_FILENAME@@"
!define INVENTORY_TAG "@@INVENTORY_TAG@@"
!define RSYNC_FILENAME "@@RSYNC_FILENAME@@"
!define GENERATED_SIZE "@@GENERATED_SIZE@@"
!define VNC_AGENT32_FILENAME "@@VNC_AGENT32_FILENAME@@"
!define VNC_AGENT64_FILENAME "@@VNC_AGENT64_FILENAME@@"
!define RFB_PORT "@@RFB_PORT@@"
!define SYNCTHING32_FILENAME "@@SYNCTHING32_FILENAME@@"
!define SYNCTHING64_FILENAME "@@SYNCTHING64_FILENAME@@"
!define CREATE_PROFILE_FILENAME "@@CREATE_PROFILE_FILENAME@@"
!define REMOVE_PROFILE_FILENAME "@@REMOVE_PROFILE_FILENAME@@"
!define PULSE_SERVICE_FILENAME "@@PULSE_SERVICE_FILENAME@@"
!define NETCHECK_SERVICE_FILENAME "@@NETCHECK_SERVICE_FILENAME@@"
!define NETCHECK_PROGRAM_FILENAME "@@NETCHECK_PROGRAM_FILENAME@@"
!define NETCHECK_SERVICE_DISPLAYNAME "@@NETCHECK_SERVICE_DISPLAYNAME@@"
!define NETCHECK_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${NETCHECK_SERVICE_DISPLAYNAME}"
!define LGPO_FILENAME "@@LGPO_FILENAME@@"
!define REMOTE_SIGNED_FILENAME "@@REMOTE_SIGNED_FILENAME@@"

SetCompressor lzma

; Modern UI installer stuff
!include "MUI2.nsh"
!define MUI_ABORTWARNING
#!define MUI_ICON "artwork/install.ico"
!define MUI_WELCOMEPAGE_TITLE_3LINES
#!define MUI_HEADERIMAGE
#!define MUI_HEADERIMAGE_RIGHT
#!define MUI_HEADERIMAGE_BITMAP "artwork/header.bmp"
#!define MUI_WELCOMEFINISHPAGE_BITMAP "artwork/wizard.bmp"

; UI pages
!insertmacro MUI_PAGE_WELCOME
!insertmacro MUI_PAGE_COMPONENTS
!insertmacro MUI_PAGE_DIRECTORY
!insertmacro MUI_PAGE_INSTFILES
!insertmacro MUI_PAGE_FINISH
!insertmacro MUI_LANGUAGE "English"

; Other useful modules
!addincludedir libs
!include "WinVer.nsh"
!include "FileFunc.nsh"
!include "zipdll.nsh"
!include "LogicLib.nsh"
!include "Trim.nsh"
!Include "LogString.nsh"
!Include "StrTok.nsh"
!Include "psexec.nsh"
!include "x64.nsh"
!include "TextReplace.nsh"
!include "TextFunc.nsh"
!include "Junction.nsh"

Var OS_LANGUAGE
Var CMD_POWERSHELL

Name "${PRODUCT_NAME} ${AGENT_VERSION}"
!If "${INVENTORY_TAG}" == ''
  OutFile "Pulse-Agent-windows-${GENERATED_SIZE}-${AGENT_VERSION}.exe"
!Else
  OutFile "Pulse-Agent-windows-${GENERATED_SIZE}-${AGENT_VERSION}-${INVENTORY_TAG}.exe"
!EndIf
!If "$PROGRAMFILES64" != ""
  InstallDir "$PROGRAMFILES64\Pulse"
!Else
  InstallDir "$PROGRAMFILES\Pulse"
!EndIf
InstallDirRegKey HKLM "${PRODUCT_DIR_REGKEY}" ""
ShowInstDetails show

; Define a few settings
Section -SETTINGS
  SetOutPath "$INSTDIR"
SectionEnd

!define DownloadFile "!insertmacro DownloadFile"
!macro DownloadFile url filename
  ${LogString} "Downloading ${url}"
  inetc::get /NOCANCEL ${url} ${filename} /END
  Pop $0 ;Get the return value
  StrCmp $0 "OK" +8
    ${LogString} "Download failed: $0"
    ${IfNot} ${Silent}
      MessageBox MB_OK|MB_ICONSTOP "Download of ${url} failed: $0$\n\
      Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 103
    Quit
  ${LogString} "Return code was: $0"
!macroend


; ####################### Python installation #######################
Section "Python" sec_py
  SetOutPath "$INSTDIR\tmp"
  ${LogString} ""
  ${LogString} "Downloads all dependencies"
  ${LogString} "------------------------------------------------------"
  @@FULL_OR_DL_PYTHON64@@
  ; 32bit python installer is needed in any case as it is used to uninstall
  ; a previous 32bit version if found
  @@FULL_OR_DL_PYTHON32@@
  @@FULL_OR_DL_PY_VCPYTHON27@@
  @@FULL_OR_DL_LIBCURL@@
  ${LogString} "Python Installation...."
  ${LogString} "------------------------------------------------------"

  ; On win32 clean old python if installed
  ${If} ${RunningX64}
    ClearErrors
    ExecWait '"python" -V'
    ${IfNot} ${Errors}
        ; Seems Python is installed. We'll try to uninstall the 32bit version
        ${LogString} "Uninstalling 32bit python if found..."
        StrCpy $0 `msiexec /x "$INSTDIR\tmp\${PYTHON32_FILENAME}" /qn REBOOT=R`
        ${LogString} "Running $0"
        nsExec::ExecToLog $0
        Pop $1 # return value/error/timeout
        ${Switch} $1
          ${Case} "0"
              StrCpy $0 `Return code was: $1`
              ${Break}
          ${Case} "1605"
              ;1605 This error is returned when you attempted to uninstall an application that isn't actually installed on a target system.
              StrCpy $0 `No previous installation`
              ${Break}
          ${Default}
              ${LogString} `Something else happened : $1`
              ${IfNot} ${Silent}
                  MessageBox MB_OK|MB_ICONSTOP "Uninstalling 32bit python failed. $\n\
                  Please check the logs in $INSTDIR\tmp\install.log"
              ${EndIf}
              SetErrorLevel 102
              Quit
        ${EndSwitch}
        ${LogString} $0
    ${EndIf}
  ${EndIf}

  ; Install of Python
  ; Get location
  Var /GLOBAL PYTHON_FILENAME
  ${If} ${RunningX64}
    StrCpy $PYTHON_FILENAME "${PYTHON64_FILENAME}"
  ${Else}
    StrCpy $PYTHON_FILENAME "${PYTHON32_FILENAME}"
  ${EndIf}
  ; Install Python
  StrCpy $0 `msiexec /i "$INSTDIR\tmp\$PYTHON_FILENAME" /quiet /qn /norestart ALLUSERS=1 ADDLOCAL=ALL REMOVE="pip_feature"`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${Switch} $1
    ${Case} "0"
        StrCpy $0 `Return code : $1`
        ${Break}
    ${Case} "3010"
        StrCpy $0 `Return code : 3010 OK`
        ;3010 ERROR_SUCCESS_REBOOT_REQUIRED
        ${Break}
    ${Default}
        StrCpy $0 `Return code : $1`
        ${IfNot} ${Silent}
            MessageBox MB_OK|MB_ICONSTOP "Python installation failed. $\n\
            Please check the logs in $INSTDIR\tmp\install.log"
        ${EndIf}
        SetErrorLevel 104
        Quit
  ${EndSwitch}
  ${LogString} $0

  ; Install pip
  StrCpy $0 `C:\Python27\python.exe -m ensurepip --upgrade`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${IfNot} $1 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "pip installation failed. $\n\
        Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 105
    Quit
  ${EndIf}

  ; Install of Visual C++ Compiler for Python
  StrCpy $0 `msiexec /i "$INSTDIR\tmp\${PY_VCPYTHON27_FILENAME}" /quiet /qn /norestart ALLUSERS=1`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${IfNot} $1 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Visual C++ Compiler for Python installation failed. $\n\
        Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 106
    Quit
  ${EndIf}

  ; Copy libcurl DLL to system32 folder
  ClearErrors
  CopyFiles /SILENT "$INSTDIR\tmp\${LIBCURL_FILENAME}" "$SYSDIR"
  ; This requires a reboot
  SetRebootFlag true
  ${If} ${Errors}
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "libcurl dll installation failed. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 107
    Quit
  ${EndIf}

  Delete $INSTDIR\tmp\${PYTHON32_FILENAME}
  Delete $INSTDIR\tmp\${PYTHON64_FILENAME}
  Delete $INSTDIR\tmp\${PY_VCPYTHON27_FILENAME}
  Delete $INSTDIR\tmp\${LIBCURL_FILENAME}
SectionEnd


; ####################### OpenSSH installation #######################
Section "OpenSSH" sec_openssh
  SetOutPath "$INSTDIR\tmp"
  ${LogString} ""
  ${LogString} "Downloads all dependencies"
  ${LogString} "------------------------------------------------------"
  ${If} ${RunningX64}
    @@FULL_OR_DL_OPENSSH64@@
  ${Else}
    @@FULL_OR_DL_OPENSSH32@@
  ${EndIf}
  @@FULL_OR_DL_RSYNC@@
  File "${REMOVE_PROFILE_FILENAME}"


  ${LogString} "pulseuser user creation...."
  ${LogString} "------------------------------------------------------"

  ; Remove previous Pulse profile and account
  Call DeletePulseProfile

  ; Remove pulse user
  Call RemovePulseUser
  RMDir /r "${USERDIR}\pulse*"
  Delete $INSTDIR\tmp\${REMOVE_PROFILE_FILENAME}

  ; Create Pulse user
  pwgen::GeneratePassword 12
  Pop $0
  Var /GLOBAL Password
  StrCpy $Password "$0"
  StrCpy $0 `net user "pulseuser" "$Password" /ADD /COMMENT:"Pulse user with admin rights on the system"`
  ${LogString} "Running net user pulseuser ************ /ADD /COMMENT:Pulse user with admin rights on the system "
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${IfNot} $1 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "pulseuser user creation failed. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 108
    Quit
  ${EndIf}

  ; Create pulse user profile
  ${LogString} "Create pulseuser profile"
  SetOutPath "$INSTDIR\tmp"
  File "${CREATE_PROFILE_FILENAME}"
  StrCpy $0 `$CMD_POWERSHELL import-module .\${CREATE_PROFILE_FILENAME}; New-Profile -Account pulseuser`
  ${LogString} "Running $0"
  nsExec::ExecToStack $0
  Pop $0
  Pop $1
  ${LogString} "Return output : $1"
  ${IfNot} $0 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "pulseuser user profile creation failed. $\n\
        Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 109
    Quit
  ${EndIf}
  ${LogString} "Return code was : $0"
  Delete $INSTDIR\tmp\${CREATE_PROFILE_FILENAME}

  ; Create .ssh folder and grant permissions
  ClearErrors
  CreateDirectory ${USERDIR}\pulseuser\.ssh
  AccessControl::GRANTONFILE /NOINHERIT "${USERDIR}\pulseuser" "(BA)" "FullAccess"
  AccessControl::GRANTONFILE /NOINHERIT "${USERDIR}\pulseuser\.ssh" "(BA)" "FullAccess"
  ${If} ${Errors}
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "${USERDIR}\pulseuser\.ssh folder creation failed. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 110
    Quit
  ${EndIf}

  ; Copy ssh public key
  SetOutPath "${USERDIR}\pulseuser\.ssh"
  File /oname=authorized_keys "${LAUNCHER_SSH_KEY}"
  StrCpy $0 `attrib +h ${USERDIR}\pulseuser`
  ${LogString} "Running ATTR $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${IfNot} $1 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "ssh public key setup failed. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 111
    Quit
  ${EndIf}
  ${LogString} "------------------------------------------------------"

  ${LogString} "OpenSSH Installation...."
  ${LogString} "------------------------------------------------------"

  ; Install of OpenSSH
  ; Get location
  Var /GLOBAL SSH_PATH
  Var /GLOBAL OPENSSH_FILENAME
  Var /GLOBAL OPENSSH_CONTENTS_FOLDER
  ${If} ${RunningX64}
    StrCpy $OPENSSH_FILENAME "${OPENSSH64_FILENAME}"
    StrCpy $SSH_PATH "$PROGRAMFILES64\${OPENSSH_NAME}"
    StrCpy $OPENSSH_CONTENTS_FOLDER "${OPENSSH_NAME}-Win64"
  ${Else}
    StrCpy $OPENSSH_FILENAME "${OPENSSH32_FILENAME}"
    StrCpy $SSH_PATH "$PROGRAMFILES\${OPENSSH_NAME}"
    StrCpy $OPENSSH_CONTENTS_FOLDER "${OPENSSH_NAME}-Win32"
  ${EndIf}

  ; Uninstall OpenSSH if found
  SetOutPath $SSH_PATH
  IfFileExists "uninstall-sshd.ps1" file_found file_not_found
  file_found:
  StrCpy $0 `$CMD_POWERSHELL -Command .\uninstall-sshd.ps1`
  ${LogString} "Running $0"
  nsExec::ExecToStack $0
  Pop $0
  Pop $1
  ${LogString} "Return output : $1"
  ${IfNot} $0 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "SSH uninstallation failed. $\n\
        Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 142
    Quit
  ${EndIf}
  goto end_of_test ;
  file_not_found:
  ${LogString} "No previous SSH found"
  end_of_test:
  ${LogString} "Return code was : $0"
  SetOutPath "C:\Program Files"
  RMDir /r "$SSH_PATH"
  ; Uninstall Mandriva SSH if found
  IfFileExists $PROGRAMFILES\Mandriva\OpenSSH 0 +5
  StrCpy $0 `$PROGRAMFILES\Mandriva\OpenSSH\uninst.exe /S`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  RMDir /r "$PROGRAMFILES\Mandriva\OpenSSH"

  ; Extract OpenSSH
  ClearErrors
  ZipDLL::extractall "$INSTDIR\tmp\$OPENSSH_FILENAME" "$INSTDIR\tmp\"
  sleep 1000
  Delete $INSTDIR\tmp\$OPENSSH_FILENAME
  Rename "$INSTDIR\tmp\$OPENSSH_CONTENTS_FOLDER" "$SSH_PATH"
  ; Update service installer and uninstaller scripts
  ${textreplace::ReplaceInFile} "$SSH_PATH\install-sshd.ps1" "$SSH_PATH\install-sshd.ps1" "Get-Service sshd" "Get-Service sshdaemon" "/S=1 /C=1 /AO=1" $0
  ${textreplace::ReplaceInFile} "$SSH_PATH\install-sshd.ps1" "$SSH_PATH\install-sshd.ps1" "Stop-Service sshd" "Stop-Service sshdaemon" "/S=1 /C=1 /AO=1" $0
  ${textreplace::ReplaceInFile} "$SSH_PATH\install-sshd.ps1" "$SSH_PATH\install-sshd.ps1" "sc.exe delete sshd" "sc.exe delete sshdaemon" "/S=1 /C=1 /AO=1" $0
  ${textreplace::ReplaceInFile} "$SSH_PATH\install-sshd.ps1" "$SSH_PATH\install-sshd.ps1" "New-Service -Name sshd" "New-Service -Name sshdaemon" "/S=1 /C=1 /AO=1" $0
  ${textreplace::ReplaceInFile} "$SSH_PATH\install-sshd.ps1" "$SSH_PATH\install-sshd.ps1" "sc.exe config sshd" "sc.exe config sshdaemon" "/S=1 /C=1 /AO=1" $0
  ${textreplace::ReplaceInFile} "$SSH_PATH\install-sshd.ps1" "$SSH_PATH\install-sshd.ps1" "sc.exe privs sshd" "sc.exe privs sshdaemon" "/S=1 /C=1 /AO=1" $0
  ${textreplace::ReplaceInFile} "$SSH_PATH\uninstall-sshd.ps1" "$SSH_PATH\uninstall-sshd.ps1" "Get-Service sshd" "Get-Service sshdaemon" "/S=1 /C=1 /AO=1" $0
  ${textreplace::ReplaceInFile} "$SSH_PATH\uninstall-sshd.ps1" "$SSH_PATH\uninstall-sshd.ps1" "Stop-Service sshd" "Stop-Service sshdaemon" "/S=1 /C=1 /AO=1" $0
  ${textreplace::ReplaceInFile} "$SSH_PATH\uninstall-sshd.ps1" "$SSH_PATH\uninstall-sshd.ps1" "sc.exe delete sshd" "sc.exe delete sshdaemon" "/S=1 /C=1 /AO=1" $0
  SetOutPath $SSH_PATH
  StrCpy $0 `$CMD_POWERSHELL -Command .\install-sshd.ps1`
  ${LogString} "Running $0"
  nsExec::ExecToStack $0
  Pop $0
  Pop $1
  ${LogString} "Return output : $1"
  ${IfNot} $0 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "SSH installation failed. $\n\
        Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 112
    Quit
  ${EndIf}
  ${LogString} "Return code was : $0"

  ; Configure SSH server
  ClearErrors
  CreateDirectory "${PROGRAMDATA}\ssh"
  CopyFiles /SILENT "$SSH_PATH\sshd_config_default" "${PROGRAMDATA}\ssh\sshd_config"
  ${textreplace::ReplaceInFile} "${PROGRAMDATA}\ssh\sshd_config" "${PROGRAMDATA}\ssh\sshd_config" "#Port 22" "Port ${SSH_PORT}" "/S=1 /C=1 /AO=1" $0
  ${textreplace::ReplaceInFile} "${PROGRAMDATA}\ssh\sshd_config" "${PROGRAMDATA}\ssh\sshd_config" "#PubkeyAuthentication yes" "PubkeyAuthentication yes" "/S=1 /C=1 /AO=1" $0
  ${textreplace::ReplaceInFile} "${PROGRAMDATA}\ssh\sshd_config" "${PROGRAMDATA}\ssh\sshd_config" "#PasswordAuthentication yes" "PasswordAuthentication no" "/S=1 /C=1 /AO=1" $0
  ${textreplace::ReplaceInFile} "${PROGRAMDATA}\ssh\sshd_config" "${PROGRAMDATA}\ssh\sshd_config" "#PidFile /var/run/sshd.pid" "PidFile C:\Windows\Temp\sshd.pid" "/S=1 /C=1 /AO=1" $0
  ${textreplace::ReplaceInFile} "${PROGRAMDATA}\ssh\sshd_config" "${PROGRAMDATA}\ssh\sshd_config" "AuthorizedKeysFile	.ssh/authorized_keys" "AuthorizedKeysFile	$\"${USERDIR}\pulseuser\.ssh\authorized_keys$\"" "/S=1 /C=1 /AO=1" $0
  ${textreplace::ReplaceInFile} "${PROGRAMDATA}\ssh\sshd_config" "${PROGRAMDATA}\ssh\sshd_config" "#SyslogFacility AUTH" "SyslogFacility LOCAL0" "/S=1 /C=1 /AO=1" $0
  ${textreplace::ReplaceInFile} "${PROGRAMDATA}\ssh\sshd_config" "${PROGRAMDATA}\ssh\sshd_config" "Match Group administrators" "#Match Group administrators" "/S=1 /C=1 /AO=1" $0
  ${textreplace::ReplaceInFile} "${PROGRAMDATA}\ssh\sshd_config" "${PROGRAMDATA}\ssh\sshd_config" "       AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys" "#       AuthorizedKeysFile __{PROGRAMDATA}__/ssh/administrators_authorized_keys" "/S=1 /C=1 /AO=1" $0
  ${If} ${Errors}
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "ssh configuration failed. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 139
    Quit
  ${EndIf}

  ; Configure SSH server to start automatically at boot
  StrCpy $0 `sc.exe config ssh-agent start= auto`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${IfNot} $1 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Setting ssh-agent autostart failed. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 113
    Quit
  ${EndIf}
  StrCpy $0 `sc.exe config sshdaemon start= auto`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${IfNot} $1 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Setting sshdaemon autostart failed. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 114
    Quit
  ${EndIf}

  ; Generate SSH Keys
  SetOutPath "$SSH_PATH"
  StrCpy $0 `"$SSH_PATH\ssh-keygen.exe" -A`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${IfNot} $1 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Generating ssh keys failed. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 115
    Quit
  ${EndIf}

  ${LogString} "Setting permissions on pulse user profile folder"
  StrCpy $0 `wmic useraccount where name="pulseuser" get sid /VALUE`
  ${LogString} "Running $0"
  nsExec::ExecToStack $0
  Pop $0
  ${If} $0 = 0
    Pop $1
    ${Trim} $0 $1
    ${StrTok} $0 "$0" "=" "L" "1"
    Var /GLOBAL SID
    StrCpy $SID "$0"
    ${LogString} "User SID: $SID"
    WriteRegExpandStr HKLM "Software\Microsoft\Windows NT\CurrentVersion\ProfileList\$SID" "ProfileImagePath" "${USERDIR}\pulseuser"
  ${Else}
    ${LogString} "Return code was: $0"
  ${EndIf}
  Pop $R0
  ${If} $R0 == error
    Pop $R0
    ${LogString} "AccessControl error: $R0"
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Setting permissions on pulseuser profile folder failed. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 116
    Quit
  ${EndIf}

  ; Set pulse account password to not expire
  StrCpy $0 `wmic useraccount where "Name='pulseuser'" set PasswordExpires=False`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${IfNot} $1 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Error setting account password expiration settings. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 117
    Quit
  ${EndIf}

  ; Add pulse user to administrators group in English, French and Portugese
  Var /GLOBAL PULSEUSER_GROUP
  ${If} $OS_LANGUAGE == "fr";
    StrCpy $0 `net localgroup administrateurs "pulseuser" /ADD`
    ${LogString} "Add pulseuser to Administrateurs group"
    nsExec::ExecToLog $0
    Pop $1 # return value/error/timeout
    ${LogString} "Return code was: $1"
    StrCpy $PULSEUSER_GROUP $1
  ${ElseIf} $OS_LANGUAGE == "es";
    StrCpy $0 `net localgroup administradores "pulseuser" /ADD`
    ${LogString} "Add pulseuser to Administradores group"
    nsExec::ExecToLog $0
    Pop $1 # return value/error/timeout
    ${LogString} "Return code was: $1"
    StrCpy $PULSEUSER_GROUP $1
  ${ElseIf} $OS_LANGUAGE == "en";
    StrCpy $0 `net localgroup administrators "pulseuser" /ADD`
    ${LogString} "Add pulseuser to Administrators group"
    nsExec::ExecToLog $0
    Pop $1 # return value/error/timeout
    ${LogString} "Return code was: $1"
    StrCpy $PULSEUSER_GROUP $1
  ${Else}
    ${LogString} "Your system language $OS_LANGUAGE is currently not supported, please report an issue https://github.com/pulse-project/pulse-xmpp-agent/issues"
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Your system language $OS_LANGUAGE is currently not supported. $\n\
        Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 101
    Quit
  ${EndIf}

  ${If} $PULSEUSER_GROUP == '0'
    ${LogString} "Added to group correctly"
  ${ElseIf} $PULSEUSER_GROUP == '1'
    ${LogString} "Missing pulseuser account"
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Missing pulseuser account. $\n\
        Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 100
    Quit
  ${ElseIf} $PULSEUSER_GROUP == '2'
    ${LogString} "Already a member of the group"
  ${Else}
    ${LogString} "Other error : $1"
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Other error : $1. $\n\
        Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 102
    Quit
  ${EndIf}

  ; Hide the account
  StrCpy $0 `WriteRegDWORD HKLM "Software\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\UserList" "pulseuser" 0`
  ${LogString} "Running $0"
  WriteRegDWORD HKLM "Software\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\UserList" "pulseuser" 0
  ${If} ${Errors}
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Error hiding pulse account. $\n\
        Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    ${LogString} "Error hiding pulse account."
    SetErrorLevel 140
    Quit
  ${EndIf}

  ; Check and configure permissions
  ClearErrors

  SetOutPath $SSH_PATH
  StrCpy $0 `$CMD_POWERSHELL import-module .\OpenSSHUtils.psd1 -Force; Repair-SshdConfigPermission -Confirm:$$false -FilePath ${PROGRAMDATA}\ssh\sshd_config`
  ${LogString} "Running $0"
  nsExec::ExecToStack $0
  Pop $0
  Pop $1
  ${LogString} "Return output : $1"
  ${IfNot} $0 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Error setting permissions on ssh keys : sshd_config. $\n\
        Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 118
    Quit
  ${EndIf}
  ${LogString} "Return code was : $0"
  StrCpy $0 `$CMD_POWERSHELL import-module .\OpenSSHUtils.psd1 -Force; Repair-SshdHostKeyPermission -Confirm:$$false -FilePath ${PROGRAMDATA}\ssh\ssh_host_dsa_key`
  ${LogString} "Running $0"
  nsExec::ExecToStack $0
  Pop $0
  Pop $1
  ${LogString} "Return output : $1"
  ${IfNot} $0 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Error setting permissions on ssh keys : ssh_host_dsa_key. $\n\
        Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 118
    Quit
  ${EndIf}
  ${LogString} "Return code was : $0"
  StrCpy $0 `$CMD_POWERSHELL import-module .\OpenSSHUtils.psd1 -Force; Repair-SshdHostKeyPermission -Confirm:$$false -FilePath ${PROGRAMDATA}\ssh\ssh_host_dsa_key.pub`
  ${LogString} "Running $0"
  nsExec::ExecToStack $0
  Pop $0
  Pop $1
  ${LogString} "Return output : $1"
  ${IfNot} $0 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Error setting permissions on ssh keys : ssh_host_dsa_key.pub. $\n\
        Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 118
    Quit
  ${EndIf}
  ${LogString} "Return code was : $0"
  StrCpy $0 `$CMD_POWERSHELL import-module .\OpenSSHUtils.psd1 -Force; Repair-SshdHostKeyPermission -Confirm:$$false -FilePath ${PROGRAMDATA}\ssh\ssh_host_ecdsa_key`
  ${LogString} "Running $0"
  nsExec::ExecToStack $0
  Pop $0
  Pop $1
  ${LogString} "Return output : $1"
  ${IfNot} $0 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Error setting permissions on ssh keys : ssh_host_ecdsa_key. $\n\
        Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 118
    Quit
  ${EndIf}
  ${LogString} "Return code was : $0"
  StrCpy $0 `$CMD_POWERSHELL import-module .\OpenSSHUtils.psd1 -Force; Repair-SshdHostKeyPermission -Confirm:$$false -FilePath ${PROGRAMDATA}\ssh\ssh_host_ecdsa_key.pub`
  ${LogString} "Running $0"
  nsExec::ExecToStack $0
  Pop $0
  Pop $1
  ${LogString} "Return output : $1"
  ${IfNot} $0 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Error setting permissions on ssh keys : ssh_host_ecdsa_key.pub. $\n\
        Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 118
    Quit
  ${EndIf}
  ${LogString} "Return code was : $0"
  StrCpy $0 `$CMD_POWERSHELL import-module .\OpenSSHUtils.psd1 -Force; Repair-SshdHostKeyPermission -Confirm:$$false -FilePath ${PROGRAMDATA}\ssh\ssh_host_ed25519_key`
  ${LogString} "Running $0"
  nsExec::ExecToStack $0
  Pop $0
  Pop $1
  ${LogString} "Return output : $1"
  ${IfNot} $0 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Error setting permissions on ssh keys : ssh_host_ed25519_key. $\n\
        Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 118
    Quit
  ${EndIf}
  ${LogString} "Return code was : $0"
  StrCpy $0 `$CMD_POWERSHELL import-module .\OpenSSHUtils.psd1 -Force; Repair-SshdHostKeyPermission -Confirm:$$false -FilePath ${PROGRAMDATA}\ssh\ssh_host_ed25519_key.pub`
  ${LogString} "Running $0"
  nsExec::ExecToStack $0
  Pop $0
  Pop $1
  ${LogString} "Return output : $1"
  ${IfNot} $0 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Error setting permissions on ssh keys : ssh_host_ed25519_key.pub. $\n\
        Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 118
    Quit
  ${EndIf}
  ${LogString} "Return code was : $0"
  StrCpy $0 `$CMD_POWERSHELL import-module .\OpenSSHUtils.psd1 -Force; Repair-SshdHostKeyPermission -Confirm:$$false -FilePath ${PROGRAMDATA}\ssh\ssh_host_rsa_key`
  ${LogString} "Running $0"
  nsExec::ExecToStack $0
  Pop $0
  Pop $1
  ${LogString} "Return output : $1"
  ${IfNot} $0 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Error setting permissions on ssh keys : ssh_host_rsa_key. $\n\
        Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 118
    Quit
  ${EndIf}
  ${LogString} "Return code was : $0"
  StrCpy $0 `$CMD_POWERSHELL import-module .\OpenSSHUtils.psd1 -Force; Repair-SshdHostKeyPermission -Confirm:$$false -FilePath ${PROGRAMDATA}\ssh\ssh_host_rsa_key.pub`
  ${LogString} "Running $0"
  nsExec::ExecToStack $0
  Pop $0
  Pop $1
  ${LogString} "Return output : $1"
  ${IfNot} $0 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Error setting permissions on ssh keys : ssh_host_rsa_key.pub. $\n\
        Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 118
    Quit
  ${EndIf}
  ${LogString} "Return code was : $0"
  StrCpy $0 `$CMD_POWERSHELL import-module .\OpenSSHUtils.psd1 -Force; Repair-AuthorizedKeyPermission -Confirm:$$false -FilePath ${USERDIR}\pulseuser\.ssh\authorized_keys`
  ${LogString} "Running $0"
  nsExec::ExecToStack $0
  Pop $0
  Pop $1
  ${LogString} "Return output : $1"
  ${IfNot} $0 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Error setting permissions on ssh keys : authorized_keys. $\n\
        Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 118
    Quit
  ${EndIf}
  ${LogString} "Return code was : $0"

  ; Start the service
  StrCpy $0 `sc start ssh-agent`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${IfNot} $1 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Error starting ssh-agent service. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 119
    Quit
  ${EndIf}
  StrCpy $0 `sc start sshdaemon`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${IfNot} $1 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Error starting sshdaemon service. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 120
    Quit
  ${EndIf}

  ; Setup of Windows firewall to allow ssh
  ${If} ${IsWinXP}
    StrCpy $0 `netsh firewall add portopening TCP ${SSH_PORT} "SSH for Pulse"`
  ${Else}
    StrCpy $0 `netsh advfirewall firewall add rule name="SSH for Pulse" dir=in action=allow protocol=TCP localport=${SSH_PORT}`
  ${EndIf}
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${IfNot} $1 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Configuring firewall to allow SSH traffic failed. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 121
    Quit
  ${EndIf}

  ; Install of rsync
  ; Install rsync only if Nytrio agent does not exist
  IfFileExists $PROGRAMFILES\Nytrio\OpenSSH +22 0
  ; Extract rsync
  ClearErrors
  ZipDLL::extractall "$INSTDIR\tmp\${RSYNC_FILENAME}" "$INSTDIR\tmp\"
  ; Copy rsync files to System32/SysWOW64 folder
  ${DisableX64FSRedirection}
  ${If} ${RunningX64}
    CopyFiles /SILENT "$INSTDIR\tmp\rsync\*.*" "$WINDIR\SysWOW64\"
  ${Else}
    CopyFiles /SILENT "$INSTDIR\tmp\rsync\*.*" "$WINDIR\System32\"
  ${EndIf}
  ${EnableX64FSRedirection}
  ${If} ${Errors}
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Error setting permissions on ssh keys. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 122
    Quit
  ${EndIf}
  ; This requires a reboot
  SetRebootFlag true

  ${LogString} "------------------------------------------------------"
  Delete $INSTDIR\tmp\${OPENSSH32_FILENAME}
  Delete $INSTDIR\tmp\${OPENSSH64_FILENAME}
  Delete $INSTDIR\tmp\${RSYNC_FILENAME}
  RMDir /r $INSTDIR\tmp\rsync
  RMDir /r "$INSTDIR\tmp\$OPENSSH_CONTENTS_FOLDER"
SectionEnd


; ####################### Setup of RDP & Firewall #######################
Section "RDP Setup" sec_rdp
  ${LogString} "RDP setup for remote control of machine via Pulse...."
  ${LogString} "------------------------------------------------------"

  ; Setup of rdp
  ClearErrors
  WriteRegDWORD HKLM "SYSTEM\CurrentControlSet\Control\Terminal Server" "fDenyTSConnections" 0
  WriteRegDWORD HKLM "SYSTEM\CurrentControlSet\Control\Terminal Server" "fSingleSessionPerUser" 0
  ${If} ${AtLeastWin7}
    WriteRegDWORD HKLM "SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" "UserAuthentication" 0
  ${EndIf}
  ${If} ${AtLeastWin7}
    WriteRegDWORD HKLM "SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" "SecurityLayer" 0
  ${EndIf}
  ${If} ${Errors}
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Error configuring RDP. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 123
    Quit
  ${EndIf}

  ; Setup of Windows firewall to allow rdp
  ${If} ${IsWinXP}
    StrCpy $0 `netsh firewall add portopening TCP 3389 "Remote Desktop for Pulse RDP"`
  ${Else}
    StrCpy $0 `netsh advfirewall firewall add rule name="Remote Desktop for Pulse RDP" dir=in action=allow protocol=TCP localport=3389`
  ${EndIf}
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${IfNot} $1 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Configuring firewall to allow RDP traffic failed. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 124
    Quit
  ${EndIf}

  ${LogString} "------------------------------------------------------"
SectionEnd


; ####################### Setup of VNC & Firewall #######################
Section "VNC Setup" sec_vnc
  SetOutPath "$INSTDIR\tmp"
  ${LogString} ""
  ${LogString} "Downloads all dependencies"
  ${LogString} "------------------------------------------------------"
  ${If} ${RunningX64}
    @@FULL_OR_DL_VNC_AGENT64@@
  ${Else}
    @@FULL_OR_DL_VNC_AGENT32@@
  ${EndIf}
  ${LogString} "VNC setup for remote control of machine via Pulse...."
  ${LogString} "------------------------------------------------------"

  ; On win64 clean old 32bit TightVNC if installed
  ${If} ${RunningX64}
    IfFileExists $PROGRAMFILES\TightVNC\tvnserver.exe 0 +8
    ${LogString} "TightVNC seems to be installed. Uninstalling..."
    StrCpy $0 `msiexec /x "$INSTDIR\tmp\${VNC_AGENT32_FILENAME}" /qn REBOOT=R`
    ${LogString} "Running $0"
    nsExec::ExecToLog $0
    Pop $1 # return value/error/timeout
    ${LogString} "Return code was: $1"
    ${LogString} ""
  ${EndIf}

  ; Get location
  Var /GLOBAL VNC_AGENT_FILENAME
  ${If} ${RunningX64}
    StrCpy $VNC_AGENT_FILENAME "${VNC_AGENT64_FILENAME}"
  ${Else}
    StrCpy $VNC_AGENT_FILENAME "${VNC_AGENT32_FILENAME}"
  ${EndIf}
  ; Install VNC
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ; Create installation command line                                                          ;
  ; http://www.tightvnc.com/doc/win/TightVNC_2.7_for_Windows_Installing_from_MSI_Packages.pdf ;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  StrCpy $0 `msiexec /i "$INSTDIR\tmp\$VNC_AGENT_FILENAME" /quiet /qn /norestart`
  StrCpy $0 `$0 ADDLOCAL=Server SERVER_REGISTER_AS_SERVICE=1 SERVER_ADD_FIREWALL_EXCEPTION=1 SERVER_ALLOW_SAS=1`
  ; Disable embedded Java WebSrv on port 5800
  StrCpy $0 `$0 SET_ACCEPTHTTPCONNECTIONS=1 VALUE_OF_ACCEPTHTTPCONNECTIONS=0`
  ; Enable RFB on port 5900
  StrCpy $0 `$0 SET_ACCEPTRFBCONNECTIONS=1 VALUE_OF_ACCEPTRFBCONNECTIONS=1`
  ; Enable loopback connection
  StrCpy $0 `$0 SET_ALLOWLOOPBACK=1 VALUE_OF_ALLOWLOOPBACK=1`
  ; Allow on all interfaces
  StrCpy $0 `$0 SET_LOOPBACKONLY=1 VALUE_OF_LOOPBACKONLY=0`
  ; Only allow from 127.0.0.1 and query user
  StrCpy $0 `$0 SET_IPACCESSCONTROL=1 VALUE_OF_IPACCESSCONTROL=0.0.0.0-255.255.255.255:2`
  ; Default answser on timeout is reject
  StrCpy $0 `$0 SET_QUERYACCEPTONTIMEOUT=1 VALUE_OF_QUERYACCEPTONTIMEOUT=0`
  ; Timeout is 20s
  StrCpy $0 `$0 SET_QUERYTIMEOUT=1 VALUE_OF_QUERYTIMEOUT=20`
  ; Show service icon
  StrCpy $0 `$0 SET_RUNCONTROLINTERFACE=1 VALUE_OF_RUNCONTROLINTERFACE=1`
  ; Hide wallpaper
  StrCpy $0 `$0 SET_REMOVEWALLPAPER=1 VALUE_OF_REMOVEWALLPAPER=1`
  ; Share between multiple connection
  StrCpy $0 `$0 SET_ALWASHARED=1 SET_NEVERSHARED=1 VALUE_OF_ALWASHARED=1 VALUE_OF_NEVERSHARED=0`
  ; Disable authentication
  StrCpy $0 `$0 SET_USEVNCAUTHENTICATION=1 VALUE_OF_USEVNCAUTHENTICATION=0`
  ; Ensure remote inputs are enabled
  StrCpy $0 `$0 SET_BLOCKREMOTEINPUT=1 VALUE_OF_BLOCKREMOTEINPUT=0`
  ; Don't do anything when terminating VNC session
  StrCpy $0 `$0 SET_DISCONNECTACTION=1 VALUE_OF_DISCONNECTACTION=0`
  ; Set the server listening port
  StrCpy $0 `$0 SET_RFBPORT=1 VALUE_OF_RFBPORT=${RFB_PORT}`

  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${IfNot} $1 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "TightVNC installation failed. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 125
    Quit
  ${EndIf}

  ; Setup of Windows firewall to allow vnc
  ${If} ${IsWinXP}
    StrCpy $0 `netsh firewall add portopening TCP ${RFB_PORT} "Remote Desktop for Pulse"`
  ${Else}
    StrCpy $0 `netsh advfirewall firewall add rule name="Remote Desktop for Pulse VNC" dir=in action=allow protocol=TCP localport=${RFB_PORT}`
  ${EndIf}
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${IfNot} $1 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Configuring firewall to allow VNC traffic failed. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 126
    Quit
  ${EndIf}

  ${LogString} "------------------------------------------------------"
  Delete $INSTDIR\tmp\${VNC_AGENT32_FILENAME}
  Delete $INSTDIR\tmp\${VNC_AGENT64_FILENAME}
SectionEnd


; ####################### Setup of Fusion Inventory agent #######################
Section "Fusion Inventory agent" sec_fusinv
  SetOutPath "$INSTDIR\tmp"
  ${LogString} ""
  ${LogString} "Downloads all dependencies"
  ${LogString} "------------------------------------------------------"
  ${If} ${RunningX64}
    @@FULL_OR_DL_FUSION_INVENTORY_AGENT64@@
  ${Else}
    @@FULL_OR_DL_FUSION_INVENTORY_AGENT32@@
  ${EndIf}
  ${LogString} "Fusion Inventory agent setup...."
  ${LogString} "------------------------------------------------------"

  ; Clean old Fusion Inventory agent if installed
  ClearErrors
  ReadRegStr $0 HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\FusionInventory-Agent" "UninstallString"
  ${IfNot} ${Errors}
    ; Seems Fusion Inventory agent is installed
    ${LogString} "Fusion Inventory agent seems to be installed. Uninstalling..."
    ; Silent uninstall
    StrCpy $0 `"$0" /S`
    ${LogString} "Running $0"
    nsExec::ExecToLog $0
    Pop $1 # return value/error/timeout
    ${LogString} "Return code was: $1"
    ${LogString} ""
  ${EndIf}

  ; Install of Fusion Inventory agent
  ; Get location
  Var /GLOBAL FUSION_INVENTORY_AGENT_FILENAME
  ${If} ${RunningX64}
    StrCpy $FUSION_INVENTORY_AGENT_FILENAME "${FUSION_INVENTORY_AGENT64_FILENAME}"
  ${Else}
    StrCpy $FUSION_INVENTORY_AGENT_FILENAME "${FUSION_INVENTORY_AGENT32_FILENAME}"
  ${EndIf}
  ; Install Fusion Inventory agent
  !If "${INVENTORY_TAG}" == ''
    StrCpy $0 `"$INSTDIR\tmp\$FUSION_INVENTORY_AGENT_FILENAME" /S /acceptlicense /no-start-menu /execmode=Manual /installtype=from-scratch`
  !Else
    StrCpy $0 `"$INSTDIR\tmp\$FUSION_INVENTORY_AGENT_FILENAME" /S /acceptlicense /no-start-menu /execmode=Manual /installtype=from-scratch /tag="${INVENTORY_TAG}"`
  !EndIf
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${IfNot} $1 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "FusionInventory installation failed. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 127
    Quit
  ${EndIf}

  ${LogString} "------------------------------------------------------"
  Delete $INSTDIR\tmp\${FUSION_INVENTORY_AGENT32_FILENAME}
  Delete $INSTDIR\tmp\${FUSION_INVENTORY_AGENT64_FILENAME}
SectionEnd


; ####################### Installation of Pulse Agent #######################
Section "!${PRODUCT_NAME}" sec_app
  SetOutPath "$INSTDIR\tmp"
  File "../${PULSE_AGENT_FILENAME}"
  File "../${AGENT_PLUGINS_FILENAME}"
  ${LogString} ""
  ${LogString} "Downloads all dependencies"
  ${LogString} "------------------------------------------------------"
  ${If} ${RunningX64}
    @@FULL_OR_DL_SYNCTHING64@@
  ${Else}
    @@FULL_OR_DL_SYNCTHING32@@
  ${EndIf}
  ${If} ${RunningX64}
    @@FULL_OR_DL_PY_MODULES_64_FILENAMES@@
  ${Else}
    @@FULL_OR_DL_PY_MODULES_32_FILENAMES@@
  ${EndIf}
  @@FULL_OR_DL_PY_MODULES_COMMON_FILENAMES@@

  ${LogString} "Pulse Agent Installation...."
  ${LogString} "------------------------------------------------------"

  ; Remove Pulse folder if present
  ClearErrors
  ReadRegStr $0 ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString"
  ${IfNot} ${Errors}
    ; Remove pulse parameters Folder
    Delete "$INSTDIR\etc\*.*"
    ; Remove files from bin
    Delete "$INSTDIR\bin\*.py*"
  ${EndIf}

  ; Install of Pulse agent
  StrCpy $0 `C:\Python27\Scripts\pip install --quiet --upgrade --no-index --find-links="$INSTDIR\tmp" ${PULSE_AGENT_FILENAME} ${AGENT_PLUGINS_FILENAME}`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${IfNot} $1 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Pulse Agent installation failed. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 128
    Quit
  ${EndIf}

  ; Copy of pulse filetree generator
  ClearErrors
  SetOutPath "$INSTDIR\bin"
  File "pulse-filetree-generator.exe"
  ${If} ${Errors}
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Pulse File Tree installation failed. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 129
    Quit
  ${EndIf}

  ; Copy syncthing exe to pulse\bin folder
  ClearErrors
  ${If} ${RunningX64}
    CopyFiles /SILENT "$INSTDIR\tmp\${SYNCTHING64_FILENAME}" "$INSTDIR\bin\syncthing.exe"
  ${Else}
    CopyFiles /SILENT "$INSTDIR\tmp\${SYNCTHING32_FILENAME}" "$INSTDIR\bin\syncthing.exe"
  ${EndIf}
  ${If} ${Errors}
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Syncthing installation failed. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 130
    Quit
  ${EndIf}
  ; Create symbolic link to syncthing config file from etc
  ClearErrors
  SetOutPath "$INSTDIR\etc"
  ${CreateSymbolicLinkFile} "syncthing.ini" "syncthing\config.xml" $0
  ${If} ${Errors}
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Symbolic link creation failed. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 131
    Quit
  ${EndIf}

  ; Setup of Windows firewall to allow Syncthing
  ${If} ${IsWinXP}
    StrCpy $0 `netsh firewall add portopening TCP 22000 "Syncthing for Pulse"`
  ${Else}
    StrCpy $0 `netsh advfirewall firewall add rule name="Syncthing for Pulse" dir=in action=allow protocol=TCP localport=22000`
  ${EndIf}
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${IfNot} $1 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Configuring firewall to allow peer deploy traffic failed. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 132
    Quit
  ${EndIf}

  ; Copy of agent config file
  ClearErrors
  SetOutPath "$INSTDIR\etc"
  File "../config/${PULSE_AGENT_CONFFILE}"
  ; Copy of agent scheduler config file only if it does not already exist (using overwrite flag)
  SetOutPath "$INSTDIR\etc"
  SetOverwrite off
  File "../config/${PULSE_SCHEDULER_CONFFILE}"
  SetOverwrite on
  ; Copy of inventory config file
  SetOutPath "$INSTDIR\etc"
  File "../config/${PULSE_INVENTORY_CONFFILE}"
  ${If} ${Errors}
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Creation of agent config files failed. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 133
    Quit
  ${EndIf}

  ; Create log folder to hold agent logs
  CreateDirectory $INSTDIR\var\log

  ; Create Pulse service
  SetOutPath "$INSTDIR\bin"
  File "${PULSE_SERVICE_FILENAME}"
  StrCpy $0 `SCHTASKS /Delete /TN "${PRODUCT_NAME}" /F`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${Switch} $1
    ${Case} "0"
        StrCpy $0 `Return code : $1`
        ${Break}
    ${Case} "1"
        ;1 The system cannot find the file specified..
        StrCpy $0 `No Pulse Agent task was found`
        ${Break}
    ${Default}
        StrCpy $0 `Return code : $1`
        ${IfNot} ${Silent}
            MessageBox MB_OK|MB_ICONSTOP "Pulse Agent tasks removal failed. $\n\
            Please check the logs in $INSTDIR\tmp\install.log"
        ${EndIf}
        SetErrorLevel 102
        Quit
  ${EndSwitch}
  ${LogString} $0


  CopyFiles /SILENT "C:\Python27\Lib\site-packages\pywin32_system32\pywintypes27.dll" "C:\Python27\Lib\site-packages\win32\"
  StrCpy $0 `C:\Python27\python.exe "$INSTDIR\bin\${PULSE_SERVICE_FILENAME}" --startup=auto install`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${IfNot} $1 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Error installing Pulse Agent service. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 134
    Quit
  ${EndIf}

  ; Create Network check service
  SetOutPath "$INSTDIR\bin"
  File "${NETCHECK_SERVICE_FILENAME}"
  File "${NETCHECK_PROGRAM_FILENAME}"
  CopyFiles /SILENT "C:\Python27\Lib\site-packages\pywin32_system32\pywintypes27.dll" "C:\Python27\Lib\site-packages\win32\"
  StrCpy $0 `C:\Python27\python.exe "$INSTDIR\bin\${NETCHECK_SERVICE_FILENAME}" --startup=auto install`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${IfNot} $1 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Error installing Network check service. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 135
    Quit
  ${EndIf}

  ; Create packages folder to hold packages to be deployed on client
  CreateDirectory $INSTDIR\var\tmp\packages
  ; Create bin folder
  CreateDirectory $INSTDIR\bin

  ; Run the agent Pulse agent
  StrCpy $0 `sc start pulseagent`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${IfNot} $1 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Error starting Pulse Agent service. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 136
    Quit
  ${EndIf}

  ; Run the agent Pulse network notify
  StrCpy $0 `sc start pulsenetworknotify`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  ${IfNot} $1 == 0
    ${IfNot} ${Silent}
        MessageBox MB_OK|MB_ICONSTOP "Error starting Pulse network notify. $\n\
	Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 141
    Quit
  ${EndIf}

  SectionIn RO
  WriteUninstaller $INSTDIR\uninstall.exe
  ; Add ourselves to Add/remove programs
  ${If} ${RunningX64}
      SetRegView 64
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "${PRODUCT_NAME}"
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${AGENT_VERSION}"
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" '"$INSTDIR\uninstall.exe"'
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "InstallLocation" "$INSTDIR"
      WriteRegDWORD ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "NoModify" 1
      WriteRegDWORD ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "NoRepair" 1
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_DEPS_UNINST_KEY}" "DisplayName" "${AGENT_DEPS_NAME}"
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_DEPS_UNINST_KEY}" "DisplayVersion" "${AGENT_VERSION}"
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_DEPS_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${NETCHECK_UNINST_KEY}" "DisplayName" "${NETCHECK_SERVICE_DISPLAYNAME}"
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${NETCHECK_UNINST_KEY}" "DisplayVersion" "${AGENT_VERSION}"
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${NETCHECK_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
  ${Else}
      SetRegView 32
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "${PRODUCT_NAME}"
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${AGENT_VERSION}"
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" '"$INSTDIR\uninstall.exe"'
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "InstallLocation" "$INSTDIR"
      WriteRegDWORD ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "NoModify" 1
      WriteRegDWORD ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "NoRepair" 1
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_DEPS_UNINST_KEY}" "DisplayName" "${AGENT_DEPS_NAME}"
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_DEPS_UNINST_KEY}" "DisplayVersion" "${AGENT_VERSION}"
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_DEPS_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${NETCHECK_UNINST_KEY}" "DisplayName" "${NETCHECK_SERVICE_DISPLAYNAME}"
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${NETCHECK_UNINST_KEY}" "DisplayVersion" "${AGENT_VERSION}"
      WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${NETCHECK_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
  ${EndIf}

  ; Write the version installed in registry
  ${If} ${RunningX64}
      SetRegView 64
      WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "CurrentVersion" "${AGENT_VERSION}"
      WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "InstallLocation" "$INSTDIR"
  ${Else}
      SetRegView 32
      WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "CurrentVersion" "${AGENT_VERSION}"
      WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "InstallLocation" "$INSTDIR"
  ${EndIf}

  Delete $INSTDIR\tmp\${PULSE_AGENT_FILENAME}
  Delete $INSTDIR\tmp\${AGENT_PLUGINS_FILENAME}
  Delete $INSTDIR\tmp\${PULSE_AGENT_TASK_XML_FILENAME}
  Delete $INSTDIR\tmp\${SYNCTHING32_FILENAME}
  Delete $INSTDIR\tmp\${SYNCTHING64_FILENAME}
  @@DELETE_PY_MODULES_FILENAMES@@

  ; Relock Powershell
  ${If} ${FileExists} "$INSTDIR\tmp\machine.pol"
    ${LogString} ""
    ${LogString} "Restore powershell execution policy"
    ${LogString} "------------------------------------------------------"
    StrCpy $0 `"$INSTDIR\bin\${LGPO_FILENAME}" /m "$INSTDIR\tmp\machine.pol"`
    ${LogString} "Running $0"
    nsExec::ExecToLog $0
    Pop $1 # return value/error/timeout
    ${LogString} "Return code was: $1"
  ${EndIf}

  ${If} ${RunningX64}
    RMDir /r "$PROGRAMFILES\Pulse"
  ${EndIf}

  Sleep 20000
SectionEnd

; What needs to be done for uninstalling
Section "Uninstall"

  ; Define Powershell command
  StrCpy $CMD_POWERSHELL "powershell -inputformat none -ExecutionPolicy UnRestricted"

  ; Unlock Powershell
  ${If} ${FileExists} "$INSTDIR\tmp\machine.pol"
    ${LogString} ""
    ${LogString} "Unlock powershell execution policy"
    ${LogString} "------------------------------------------------------"
    StrCpy $0 `"$INSTDIR\bin\${LGPO_FILENAME}" /m "$INSTDIR\bin\${REMOTE_SIGNED_FILENAME}"`
    ${LogString} "Running $0"
    nsExec::ExecToLog $0
    Pop $1 # return value/error/timeout
    ${LogString} "Return code was: $1"
  ${EndIf}

  ; Stop all Pulse services
  Call un.StopPulseServices

  ; Remove OpenSSH
  StrCpy $0 `sc.exe stop sshdaemon`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  StrCpy $0 `sc.exe stop ssh-agent`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  StrCpy $0 `sc.exe delete ssh-agent`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  StrCpy $0 `sc.exe delete sshdaemon`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  Delete "$SYSDIR\ssh-lsa.dll"

  ; Uninstall OpenSSH
  ${If} ${FileExists} "$PROGRAMFILES64\${OPENSSH_NAME}\uninstall-sshd.ps1"
    ${LogString} "OpenSSH uninstall.."
    ${LogString} "------------------------------------------------------"
    setOutPath $PROGRAMFILES64\${OPENSSH_NAME}
    StrCpy $0 `$CMD_POWERSHELL -Command .\uninstall-sshd.ps1`
    ${LogString} "Running $0"
    nsExec::ExecToStack $0
    pop $0
    pop $1
    ${LogString} "Return output : $1"
    ${IfNot} $0 == 0
      ${IfNot} ${Silent}
          MessageBox MB_OK|MB_ICONSTOP "SSH uninstallation failed. $\n\
          Please check the logs in $INSTDIR\tmp\install.log"
      ${EndIf}
      SetErrorLevel 142
      Quit
    ${EndIf}
    RMDir /r /REBOOTOK "$PROGRAMFILES64\OpenSSH"
  ${Else}
    ${LogString} "OpenSSH uninstall.."
    ${LogString} "------------------------------------------------------"
    setOutPath $PROGRAMFILES\${OPENSSH_NAME}
    StrCpy $0 `$CMD_POWERSHELL -Command .\uninstall-sshd.ps1`
    ${LogString} "Running $0"
    nsExec::ExecToStack $0
    pop $0
    pop $1
    ${LogString} "Return output : $1"
    ${IfNot} $0 == 0
      ${IfNot} ${Silent}
          MessageBox MB_OK|MB_ICONSTOP "SSH uninstallation failed. $\n\
          Please check the logs in $INSTDIR\tmp\install.log"
      ${EndIf}
      SetErrorLevel 142
      Quit
    ${EndIf}
    RMDir /r /REBOOTOK "$PROGRAMFILES\${OPENSSH_NAME}"
  ${EndIf}

  RMDir /r "${PROGRAMDATA}\ssh"
  ; Remove libcurl
  Delete "$SYSDIR\${LIBCURL_FILENAME}"

  ; Uninstall agent
  StrCpy $0 `sc delete pulseagent`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  StrCpy $0 `sc delete pulsenetworknotify`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  StrCpy $0 `netsh.exe advfirewall firewall delete rule name="Remote Desktop for Pulse"`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  StrCpy $0 `netsh.exe advfirewall firewall delete rule name="SSH for Pulse"`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  StrCpy $0 `netsh.exe advfirewall firewall delete rule name="Syncthing for Pulse"`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  StrCpy $0 `C:\Python27\Scripts\pip uninstall "${PULSE_AGENT_MODULE}" -y`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${LogString} "Return code was: $1"
  RMDir /r "C:\Python27\Lib\site-packages\pulse_xmpp_agent\"
  RMDir /r "C:\Program Files\OpenSSH"

  ; Remove Pulse profile
  Call un.DeletePulseProfile
  ; Remove pulse user
  Call un.RemovePulseUser

  ; Relock Powershell
  ${If} ${FileExists} "$INSTDIR\tmp\machine.pol"
    ${LogString} ""
    ${LogString} "Restaure powershell execution policy"
    ${LogString} "------------------------------------------------------"
    StrCpy $0 `"$INSTDIR\bin\${LGPO_FILENAME}" /m "$INSTDIR\tmp\machine.pol"`
    ${LogString} "Running $0"
    nsExec::ExecToLog $0
    Pop $1 # return value/error/timeout
    ${LogString} "Return code was: $1"
  ${EndIf}

  RMDir /r /REBOOTOK "${USERDIR}\pulse*"
  Delete $INSTDIR\tmp\${REMOVE_PROFILE_FILENAME}
  RMDir /r /REBOOTOK "$INSTDIR"

  DeleteRegKey HKLM "${PRODUCT_UNINST_KEY}"
  DeleteRegKey HKLM "${PRODUCT_DEPS_UNINST_KEY}"
  DeleteRegKey HKLM "${NETCHECK_UNINST_KEY}"
  DeleteRegKey HKLM "${PRODUCT_DIR_REGKEY}"

SectionEnd

; Functions

Function .onInit
  ; XP or later
  ${IfNot} ${AtLeastWinXP}
    MessageBox MB_OK|MB_ICONSTOP "XP and above required for running ${PRODUCT_NAME}"
    SetErrorLevel 137
    Quit
  ${EndIf}

  ; Make sure we are running as admin
  UserInfo::GetAccountType
  pop $0
  ${If} $0 != "admin" ;Require admin rights on NT4+
    MessageBox MB_OK|MB_ICONSTOP "Administrator rights required!"
    SetErrorLevel 740 ;ERROR_ELEVATION_REQUIRED
    Quit
  ${EndIf}

  ; Create registry keys in 64bit section
  SetRegView 64

  ; Define Powershell command
  StrCpy $CMD_POWERSHELL "powershell -inputformat none -ExecutionPolicy UnRestricted"

  ; Install log initialization
  !If "$PROGRAMFILES64" != ""
    StrCpy $INSTDIR "$PROGRAMFILES64\Pulse"
  !Else
    StrCpy $INSTDIR "$PROGRAMFILES\Pulse"
  !EndIf
  CreateDirectory "$INSTDIR\tmp"
  ${LogInit} "$INSTDIR\tmp\install.log"
  ${LogString} "Starting install..."
  !insertmacro GetTime
  ${GetTime} "" "L" $0 $1 $2 $3 $4 $5 $6
  ${LogString} "Start time: $3 $0/$1/$2 at $4:$5:$6"

  ; Unlock Powershell
  ${LogString} ""
  ${LogString} "Backup and unlock powershell execution policy"
  ${LogString} "------------------------------------------------------"
  CreateDirectory "$INSTDIR\bin"
  SetOutPath "$INSTDIR\bin"
  @@FULL_OR_DL_LGPO@@
  File "${REMOTE_SIGNED_FILENAME}"

  ; Detect if policy are applied
  StrCpy $0 `$CMD_POWERSHELL get-executionpolicy -scope MachinePolicy`
  ${LogString} "Running $0"
  nsExec::ExecToStack $0
  Pop $0
  Pop $1
  ${TrimNewLines} $1 $1
  ${LogString} "PowerShell Policy status : $1"

  ${IfNot} $1 == Undefined 
    SetOutPath "$INSTDIR\tmp\gpo"
    StrCpy $0 `"$INSTDIR\bin\${LGPO_FILENAME}" /b "$INSTDIR\tmp\gpo"`
    ${LogString} "Running $0"
    nsExec::ExecToLog $0
    Pop $0
    ${LogString} "Return code was : $0"
    StrCpy $0 `cmd /c where /r "$INSTDIR\tmp" registry.pol | findstr Machine`
    ${LogString} "Running $0"
    nsExec::ExecToStack $0
    Pop $0
    Pop $1 # return value/error/timeout
    ${LogString} "Return code was : $1"
    Rename "$1" "$INSTDIR\tmp\machine.pol"
    SetOutPath "$INSTDIR\tmp"
    RMDir /r /REBOOTOK "$INSTDIR\tmp\gpo"
  ${EndIf}

  ${If} ${FileExists} "$INSTDIR\tmp\machine.pol"
    StrCpy $0 `"$INSTDIR\bin\${LGPO_FILENAME}" /m "$INSTDIR\bin\${REMOTE_SIGNED_FILENAME}"`
    ${LogString} "Running $0"
    nsExec::ExecToLog $0
    Pop $1 # return value/error/timeout
    ${LogString} "Return code was: $1"
  ${EndIf}

  ; Detect system language
  StrCpy $0 `$CMD_POWERSHELL -Command (get-uiculture).TwoLetterISOLanguageName`
  ${LogString} "Running $0"
  nsExec::ExecToStack $0
  Pop $0
  Pop $1
  ${TrimNewLines} $1 $OS_LANGUAGE
  ${LogString} "System language is : $OS_LANGUAGE"

  ; Stop the agent if it is already running and kill all python tasks
  ${LogString} ""
  ${LogString} "Detect previous installation and stop service"
  ${LogString} "------------------------------------------------------"
  Call StopPulseServices

FunctionEnd

Function un.onInit
  ; Create registry keys in 64bit section
  SetRegView 64
FunctionEnd

Function .onGUIEnd
  ; Write the log file
  !insertmacro Log_Close
FunctionEnd

Function .onMouseOverSection
  ; Find which section the mouse is over, and set the corresponding description.
  FindWindow $R0 "#32770" "" $HWNDPARENT
  GetDlgItem $R0 $R0 1043 ; description item (must be added to the UI)

  StrCmp $0 ${sec_py} 0 +3
    SendMessage $R0 ${WM_SETTEXT} 0 "STR:The Python interpreter. \
          This is required for ${PRODUCT_NAME} to run."

  StrCmp $0 ${sec_openssh} 0 +2
    SendMessage $R0 ${WM_SETTEXT} 0 "STR:OpenSSH required for deployment, backup, etc."

  StrCmp $0 ${sec_rdp} "" +2
    SendMessage $R0 ${WM_SETTEXT} 0 "STR:Setup RDP protocol required for remote control"

  StrCmp $0 ${sec_vnc} "" +2
    SendMessage $R0 ${WM_SETTEXT} 0 "STR:Setup VNC required for remote control"

  StrCmp $0 ${sec_fusinv} "" +2
    SendMessage $R0 ${WM_SETTEXT} 0 "STR:Fusion inventory agent required for inventory"

  StrCmp $0 ${sec_app} "" +2
    SendMessage $R0 ${WM_SETTEXT} 0 "STR:${PRODUCT_NAME}"
FunctionEnd

; Macro Remove pulseuser / pulse user
!macro RemovePulseUser UN
  Function ${UN}RemovePulseUser
    ; Remove pulse user
    StrCpy $0 `net user "pulse" /DELETE`
    nsExec::ExecToLog $0
    ${LogString} `Running $0`
    Pop $1 # return value/error/timeout
    ${Switch} $1
      ${Case} "0"
          StrCpy $0 `Return code : $1`
          ${Break}
      ${Case} "2"
          ;2 The user name could not be found.
          StrCpy $0 `No old Pulse account found`
          ${Break}
      ${Default}
          StrCpy $0 `Return code : $1`
          ${IfNot} ${Silent}
              MessageBox MB_OK|MB_ICONSTOP "Pulse old account removal failed. $\n\
              Please check the logs in $INSTDIR\tmp\install.log"
          ${EndIf}
          SetErrorLevel 102
          Quit
    ${EndSwitch}
    ${LogString} $0

    StrCpy $0 `net user "pulseuser" /DELETE`
    nsExec::ExecToLog $0
    ${LogString} `Running $0`
    Pop $1 # return value/error/timeout
    ${Switch} $1
      ${Case} "0"
          StrCpy $0 `Return code : $1`
          ${Break}
      ${Case} "2"
          ;2 The user name could not be found.
          StrCpy $0 `No pulseuser account found`
          ${Break}
      ${Default}
          StrCpy $0 `Return code : $1`
          ${IfNot} ${Silent}
              MessageBox MB_OK|MB_ICONSTOP "pulseuser account removal failed. $\n\
              Please check the logs in $INSTDIR\tmp\install.log"
          ${EndIf}
          SetErrorLevel 102
          Quit
    ${EndSwitch}
    ${LogString} $0
  FunctionEnd
!macroend
!insertmacro RemovePulseUser ""
!insertmacro RemovePulseUser "un."


; Macro Stop all Pulse services
!macro StopPulseServices UN
  Function ${UN}StopPulseServices
  StrCpy $0 `sc query pulseagent`
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  StrCpy $0 `net stop pulseagent`
  ${LogString} `Running $0`
  ${Switch} $1
    ${Case} "0"
        nsExec::ExecToLog $0
        Pop $1 # return value/error/timeout
          ${Switch} $1
          ${Case} "0"
            StrCpy $0 `Service has been stopped`
            ${Break}
          ${Default}
            StrCpy $0 `Service is already stopped`
          ${EndSwitch}
        ${Break}
    ${Case} "1060"
        ;1060 The specified service does not exist as an installed service.
        StrCpy $0 `No previous installation`
        ${Break}
    ${Default}
        ${LogString} `Something else happened : $1`
        ${IfNot} ${Silent}
            MessageBox MB_OK|MB_ICONSTOP "Pulse agent stop failed. $\n\
            Please check the logs in $INSTDIR\tmp\install.log"
        ${EndIf}
        SetErrorLevel 102
        Quit
  ${EndSwitch}
  ${LogString} $0

  StrCpy $0 `sc query pulsenetworknotify`
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  StrCpy $0 `net stop pulsenetworknotify`
  ${LogString} `Running $0`
  ${Switch} $1
    ${Case} "0"
        nsExec::ExecToLog $0
        Pop $1 # return value/error/timeout
          ${Switch} $1
          ${Case} "0"
            StrCpy $0 `Service has been stopped`
            ${Break}
          ${Default}
            StrCpy $0 `Service is already stopped`
          ${EndSwitch}
        ${Break}
    ${Case} "1060"
        ;1060 The specified service does not exist as an installed service.
        StrCpy $0 `No previous installation`
        ${Break}
    ${Default}
        ${LogString} `Something else happened : $1`
	${LogString} $0
        ${IfNot} ${Silent}
            MessageBox MB_OK|MB_ICONSTOP "Pulse network notify stop failed. $\n\
            Please check the logs in $INSTDIR\tmp\install.log"
        ${EndIf}
        SetErrorLevel 102
        Quit
  ${EndSwitch}
  ${LogString} $0

  StrCpy $0 `taskkill.exe /F /IM syncthing.exe`
  ${LogString} "Running $0"
  nsExec::ExecToLog $0
  Pop $1 # return value/error/timeout
  ${Switch} $1
    ${Case} "0"
        StrCpy $0 `Process has been stopped`
        ${Break}
    ${Case} "128"
        ;128 The process is not found.
        StrCpy $0 `Process is already stopped`
        ${Break}
    ${Default}
        ${LogString} `Something else happened : $1`
	${LogString} $0
        ${IfNot} ${Silent}
            MessageBox MB_OK|MB_ICONSTOP "Syncthing stop failed. $\n\
            Please check the logs in $INSTDIR\tmp\install.log"
        ${EndIf}
        SetErrorLevel 102
        Quit
  ${EndSwitch}
  ${LogString} $0
  FunctionEnd
!macroend
!insertmacro StopPulseServices ""
!insertmacro StopPulseServices "un."

; Macro Delete Pulse profile
!macro DeletePulseProfile UN
  Function ${UN}DeletePulseProfile
  ; Remove Pulse profile
  SetOutPath "$INSTDIR\tmp"
  File "${REMOVE_PROFILE_FILENAME}"
  ${PowerShellExecFile} ".\${REMOVE_PROFILE_FILENAME}"
  Pop $R0
  ${If} $R0 == "Failed"
    ${IfNot} ${Silent}
      ${LogString} "Profile deletion failed"
      MessageBox MB_OK|MB_ICONSTOP "Pulse user profile deletion failed. $\n\
      Please check the logs in $INSTDIR\tmp\install.log"
    ${EndIf}
    SetErrorLevel 138
    Quit
  ${EndIf}
  ${LogString} `Remove Pulse profile : $R0`
  FunctionEnd
!macroend
!insertmacro DeletePulseProfile ""
!insertmacro DeletePulseProfile "un."
