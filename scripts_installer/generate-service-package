#!/bin/bash

# -*- coding: utf-8; -*-
#
# (c) 2019 siveo, http://www.siveo.net
#
# Author(s):
#
# This file is part of Pulse 2, http://www.siveo.net
#
# Pulse 2 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Pulse 2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pulse 2.  If not, see <http://www.gnu.org/licenses/>.

# Check if called with uuid to be used
if [[ $1 =~ ^\{?[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}\}?$ ]]; then
    PACKAGE_UUID=$1
else
    echo "ERROR: $0 must be called with a UUID as parameter"
    exit 1
fi

# A few settings
PACKAGE_NAME="Pulse service"
PACKAGE_DESC="Service for Pulse Agent on Windows"
AGENT_VERSION=$(grep ^AGENT_VERSION= /var/lib/pulse2/clients/win/generate-pulse-agent-win.sh | cut -d '"' -f2)

PULSE_AGENT_WIN_BASE_PATH="/var/lib/pulse2/clients/win"
PULSE_SERVICE_NAME="pulse-service.py"

#### CREATE THE PACKAGE
echo "INFO: Generating ${PACKAGE_NAME} package..."

echo "  Package UUID: ${PACKAGE_UUID}"

# First check if the package exists.
# If it is the case, keep its uuid for deleting it after generation.
old_uuid=$(grep "${PACKAGE_NAME} v${AGENT_VERSION}" /var/lib/pulse2/packages/* -R | grep xmppdeploy.json | grep -P -o '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}')

# Create the package
mkdir -p /var/lib/pulse2/packages/${PACKAGE_UUID}
pushd /var/lib/pulse2/packages/${PACKAGE_UUID}

# Copy all needed files
cp ${PULSE_AGENT_WIN_BASE_PATH}/${PULSE_SERVICE_NAME} .

# Generate install commands
INSTALL_CMD="SCHTASKS /Delete /TN \"Pulse Agent\" /F \n
pip install --upgrade pathlib \n
copy C:\\Python27\\Lib\\site-packages\\pywin32_system32\\pywintypes27.dll C:\\Python27\\Lib\\site-packages\\win32\\ \n
copy ${PULSE_SERVICE_NAME} \"%PROGRAMFILES%/Pulse/bin\"\n
python \"%PROGRAMFILES%/Pulse/bin/${PULSE_SERVICE_NAME}\" --startup=auto install"
INSTALL_CMD_ENCODED=$(echo -e ${INSTALL_CMD} | base64 --wrap=0)

REGISTRY_CMD="REG ADD \"HKLM\Software\Microsoft\Windows\CurrentVersion\Uninstall\\${PACKAGE_NAME}\" /f\n
REG ADD \"HKLM\Software\Microsoft\Windows\CurrentVersion\Uninstall\\${PACKAGE_NAME}\" /v DisplayName /t REG_SZ /d \"${PACKAGE_NAME}\" /f\n
REG ADD \"HKLM\Software\Microsoft\Windows\CurrentVersion\Uninstall\\${PACKAGE_NAME}\" /v DisplayVersion /t REG_SZ /d ${AGENT_VERSION} /f\n
REG ADD \"HKLM\Software\Microsoft\Windows\CurrentVersion\Uninstall\\${PACKAGE_NAME}\" /v Publisher /t REG_SZ /d \"SIVEO\" /f"
REGISTRY_CMD_ENCODED=$(echo -e ${REGISTRY_CMD_WIN} | base64 --wrap=0)

# Generate xmppdeploy.json
cat <<EOF > xmppdeploy.json
{
    "info": {
        "description": "${PACKAGE_DESC}",
        "name": "${PACKAGE_NAME} v${AGENT_VERSION}",
        "software": "${PACKAGE_NAME}",
        "transferfile": true,
        "methodetransfert": "pullcurl",
        "Dependency": [],
        "version": "${AGENT_VERSION}",
        "metagenerator": "manual"
    },
    "win": {
        "sequence": [
            {
                "typescript": "Batch",
                "script": "${INSTALL_CMD_ENCODED}",
                "actionlabel": "93e62cea",
                "step": 0,
                "codereturn": "",
                "error": 3,
                "action": "actionprocessscriptfile",
                "@resultcommand": "@resultcommand"
            },
            {
                "typescript": "Batch",
                "script": "${REGISTRY_CMD_ENCODED}",
                "actionlabel": "caab5c99",
                "step": 1,
                "codereturn": "",
                "error": 3,
                "action": "actionprocessscriptfile",
                "@resultcommand": "@resultcommand"
            },
            {
                "action": "actionsuccescompletedend",
                "step": 2,
                "actionlabel": "e0e3bbc2",
                "clear": "True",
                "inventory": "True"
            },
            {
                "action": "actionerrorcompletedend",
                "step": 3,
                "actionlabel": "730427c3"
            }
        ]
    },
    "metaparameter": {
        "win": {
            "label": {
                "93e62cea": 0,
                "caab5c99": 1,
                "e0e3bbc2": 2,
                "730427c3": 3
            }
        },
        "os": [
            "win"
        ]
    }
}
EOF

# Generate conf.json
cat <<EOF > conf.json
{"commands":{"postCommandSuccess":{"command": "", "name": ""},"installInit": {"command": "", "name": ""},"postCommandFailure": {"command": "", "name": ""},"command": {"command": "DO NOT EDIT THIS PACKAGE", "name": ""},"preCommand": {"command": "", "name": ""}}, "description": "${PACKAGE_DESC}","targetos": "win", "entity_id": "0", "sub_packages": [], "reboot": 0, "version": "${AGENT_VERSION}",
"inventory": {"associateinventory": "1", "licenses": "10000", "queries": {"Qversion": "${AGENT_VERSION}*", "Qvendor": "", "boolcnd": "", "Qsoftware": "pulse*service"}}, "id": "${PACKAGE_UUID}", "name": "${PACKAGE_NAME} v${AGENT_VERSION}", "metagenerator": "manual"}
EOF

popd
echo "INFO: Generating ${PACKAGE_NAME} package... Done"

# Change permissions on the package
chown -R syncthing: /var/lib/pulse2/packages/${PACKAGE_UUID}


# Delete old version if found
if [[ ${old_uuid} != '' ]]; then
    echo "INFO: Deleting package ${old_uuid}..."
    rm -rf /var/lib/pulse2/packages/${old_uuid}
    echo "INFO: Deleting package ${old_uuid}... Done"
fi
