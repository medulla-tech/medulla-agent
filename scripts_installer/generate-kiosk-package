#!/bin/bash

# -*- coding: utf-8; -*-
#
# (c) 2018 siveo, http://www.siveo.net
#
# Author(s):
#
# This file is part of Pulse 2, http://www.siveo.net
#
# Pulse 2 is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Pulse 2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pulse 2.  If not, see <http://www.gnu.org/licenses/>.

echo "INFO: Generating package ${PACKAGE_NAME}..."

# Detect if uuid or uuidgen is available
if [ -x "$(command -v uuid)" ]; then
    PACKAGE_UUID=$(uuid)
    echo "  Package UUID: ${PACKAGE_UUID}"
elif [ -x "$(command -v uuidgen)" ]; then
    PACKAGE_UUID=$(uuidgen)
    echo "  Package UUID: ${PACKAGE_UUID}"
else
  echo "ERROR: Please install uuid or uuidgen."
  exit 1
fi

# A few settings
PACKAGE_NAME="Medulla Kiosk"
PACKAGE_DESC="Kiosk module for machines managed by Medulla"

KIOSK_VERSION="1.0"
PULSE_KIOSK_FILENAME="kiosk-interface-${KIOSK_VERSION}.tar.gz"
PULSE_KIOSK_PATH="/var/lib/pulse2/clients"


#### CREATE KIOSK PACKAGE
# First check if the package exists.
# If it is the case, keep its uuid for deleting it after generation.
old_uuid=$(grep "${PACKAGE_NAME} v${KIOSK_VERSION}" /var/lib/pulse2/packages/sharing/global/* -R | grep xmppdeploy.json | grep -P -o '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}')

# Create the package
mkdir -p /var/lib/pulse2/packages/sharing/global/${PACKAGE_UUID}
pushd /var/lib/pulse2/packages/sharing/global/${PACKAGE_UUID}

# Copy the kiosk to the package folder
cp ${PULSE_KIOSK_PATH}/${PULSE_KIOSK_FILENAME} .

# Generate bat file used for running the kiosk at startup
cat <<EOF > PulseKiosk.bat
cd %ProgramFiles%\Python311\Lib\site-packages\kiosk_interface
cmd.exe /K py -3 __init__.py
EOF

KISOK_INSTALL_COMMAND="py.exe -3 -m pip install --upgrade --no-index --find-links=\".\" ${PULSE_KIOSK_FILENAME}"
KISOK_INSTALL_COMMAND_ENCODED=$(echo -e ${KISOK_INSTALL_COMMAND} | base64 --wrap=0)
KIOSK_COPY_BAT_COMMAND="copy PulseKiosk.bat \"%ALLUSERSPROFILE%\Microsoft\Windows\Start Menu\Programs\StartUp\""
KIOSK_COPY_BAT_COMMAND_ENCODED=$(echo -e ${KIOSK_COPY_BAT_COMMAND} | base64 --wrap=0)
# Generate xmppdeploy.json
cat <<EOF > xmppdeploy.json
{
    "info": {
        "localisation_server": "global",
        "previous_localisation_server": "global",
        "description": "${PACKAGE_DESC}",
        "name": "${PACKAGE_NAME} v${KIOSK_VERSION}",
        "software": "${PACKAGE_NAME}",
        "transferfile": true,
        "methodetransfert": "pushrsync",
        "Dependency": [],
        "version": "${KIOSK_VERSION}",
        "metagenerator": "manual"
    },
    "win": {
        "sequence": [
            {
                "action": "actionprocessscript",
                "typescript": "Batch", 
                "step": 0,
                "codereturn": "",
                "actionlabel": "e11c5ac2",
                "command": "${KISOK_INSTALL_COMMAND_ENCODED}",
                "timeout": "800",
                "@resultcommand": "@resultcommand",
                "gotoreturncode@-1": "END_ERROR"
            },
            {
                "action": "actionprocessscript",
                "typescript": "Batch", 
                "step": 1,
                "command": "${KIOSK_COPY_BAT_COMMAND_ENCODED}",
                "timeout": "800",
                "actionlabel": "e843a25b",
                "codereturn": "",
                "@resultcommand": "@resultcommand",
                "gotoreturncode@-1": "END_ERROR"
            },
            {
                "action": "actionsuccescompletedend",
                "step": 2,
                "actionlabel": "END_SUCCESS",
                "clear": "False",
                "inventory": "False"
            },
            {
                "action": "actionerrorcompletedend",
                "step": 3,
                "actionlabel": "END_ERROR"
            }
        ]
    },
    "metaparameter": {
        "win": {
            "label": {
                "END_SUCCESS": 2,
                "e11c5ac2": 0,
                "e843a25b": 1,
                "END_ERROR": 3
            }
        },
        "os": [
            "win"
        ], 
        "uuid": "${PACKAGE_UUID}"
    }
}
EOF

# Generate conf.json
cat <<EOF > conf.json
{"commands":{"postCommandSuccess":{"command": "", "name": ""},"installInit": {"command": "", "name": ""},"postCommandFailure": {"command": "", "name": ""},"command": {"command": "DO NOT EDIT THIS PACKAGE", "name": ""},"preCommand": {"command": "", "name": ""}}, "description": "${PACKAGE_DESC}","targetos": "win", "entity_id": "0", "sub_packages": [], "localisation_server": "global", "previous_localisation_server": "global", "reboot": 0, "version": "${KIOSK_VERSION}",
"inventory": {"associateinventory": "0", "licenses": "", "queries": {"Qversion": "", "Qvendor": "", "boolcnd": "", "Qsoftware": ""}}, "id": "${PACKAGE_UUID}", "name": "${PACKAGE_NAME} v${KIOSK_VERSION}", "metagenerator": "manual"}
EOF

popd

echo "INFO: Generating package ${PACKAGE_NAME}... Done"

# Change permissions on the package
chown -R syncthing: /var/lib/pulse2/packages/sharing/global/${PACKAGE_UUID}

# Delete old version if found
if [[ ${old_uuid} != '' ]]; then
  echo "INFO: Deleting pakage ${old_uuid}..."
  rm -rf /var/lib/pulse2/packages/sharing/global/${old_uuid}
  echo "INFO: Deleting pakage ${old_uuid}... Done"
fi

# Insert package in database
echo "INFO: Generating package links and database records..."
DBHOST=$(crudini --get /etc/mmc/plugins/pkgs.ini.local database dbhost 2> /dev/null || echo localhost)
DBPORT=$(crudini --get /etc/mmc/plugins/pkgs.ini.local database dbport 2> /dev/null || echo 3306)
DBPASS=$(crudini --get /etc/mmc/plugins/pkgs.ini.local database dbpasswd)
DBUSER=$(crudini --get /etc/mmc/plugins/pkgs.ini.local database dbuser 2> /dev/null || echo mmc)
/usr/sbin/pulse2-generation_package.py -H ${DBHOST} -P ${DBPORT} -u ${DBUSER} -p ${DBPASS} -g -m -l -r > /tmp/pulse2-generation_package.log
echo "INFO: Generating package links and database records... Done"
